// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopfloor.Inspection.Infrastructure.Contexts;

#nullable disable

namespace Shopfloor.Inspection.Infrastructure.Migrations
{
    [DbContext(typeof(InspectionContext))]
    [Migration("20240226030051_Add-RelationShip")]
    partial class AddRelationShip
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AQLVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("Accept")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LotSizeFrom")
                        .HasColumnType("int");

                    b.Property<int>("LotSizeTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Reject")
                        .HasColumnType("int");

                    b.Property<int>("SampleSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AQLVersionId");

                    b.ToTable("AQL", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQLVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AQLVersion", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Inpection100PointSysId")
                        .HasColumnType("int");

                    b.Property<int?>("Inpection4PointSysId")
                        .HasColumnType("int");

                    b.Property<int?>("InpectionTCStandardId")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Inpection100PointSysId");

                    b.HasIndex("Inpection4PointSysId");

                    b.HasIndex("InpectionTCStandardId");

                    b.HasIndex("InspectionId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Conversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Conversion", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FabricWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FabricWeight", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FourPointSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FourPointSystem", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inpection100PointSys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualWeight")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("CaptureMeter")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grade")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsCreatedFromProduction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int>("PointSquareMeter")
                        .HasColumnType("int");

                    b.Property<int?>("QCRequestArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StockMovementNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("SystemResult")
                        .HasColumnType("bit");

                    b.Property<int>("TotalContDefect")
                        .HasColumnType("int");

                    b.Property<int>("TotalDefect")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoint")
                        .HasColumnType("int");

                    b.Property<bool>("UserResult")
                        .HasColumnType("bit");

                    b.Property<int?>("WarpDensity")
                        .HasColumnType("int");

                    b.Property<int?>("WeftDensity")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeightGM2")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("QCRequestArticleId")
                        .IsUnique()
                        .HasFilter("[QCRequestArticleId] IS NOT NULL");

                    b.ToTable("Inpection100PointSys", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inpection4PointSys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualWeight")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("CaptureMeter")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grade")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsCreatedFromProduction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int>("PointSquareMeter")
                        .HasColumnType("int");

                    b.Property<int?>("QCRequestArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StockMovementNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("SystemResult")
                        .HasColumnType("bit");

                    b.Property<int>("TotalContDefect")
                        .HasColumnType("int");

                    b.Property<int>("TotalDefect")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoint")
                        .HasColumnType("int");

                    b.Property<bool>("UserResult")
                        .HasColumnType("bit");

                    b.Property<int?>("WarpDensity")
                        .HasColumnType("int");

                    b.Property<int?>("WeftDensity")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeightGM2")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("QCRequestArticleId")
                        .IsUnique()
                        .HasFilter("[QCRequestArticleId] IS NOT NULL");

                    b.ToTable("Inpection4PointSys", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InpectionTCStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grade")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsCreatedFromProduction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int>("QCRequestArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<string>("StockMovementNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("QCRequestArticleId")
                        .IsUnique();

                    b.ToTable("InpectionTCStandard", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CuttingTable")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("DefaultResult")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("InspectionQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsCreatedFromProduction")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("MeasurementQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("MeasurementResult")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QCRequestArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Stage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalDefect")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("UserResult")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QCRequestArticleId")
                        .IsUnique()
                        .HasFilter("[QCRequestArticleId] IS NOT NULL");

                    b.ToTable("Inspection", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionBySize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("BGroupQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("BGroupUsable")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ColorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExcessShortageQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("GRNQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<decimal>("InspectionQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Lot")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("LotQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfDefect")
                        .HasColumnType("int");

                    b.Property<decimal>("OKQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("PreInspectedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("QCRequestDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonforBGroup")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Shade")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SizeCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SizeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionBySize", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Critial")
                        .HasColumnType("int");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCorrectiveActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemRootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTimelineId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionDefectCapturing", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing100PointSys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Critial")
                        .HasColumnType("int");

                    b.Property<int>("Inpection100PointSysId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Major")
                        .HasColumnType("int");

                    b.Property<int?>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCorrectiveActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemRootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTimelineId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Inpection100PointSysId");

                    b.ToTable("InspectionDefectCapturing100PointSys", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing4PointSys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DefectQtyFour")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQtyOne")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQtyThree")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQtyTwo")
                        .HasColumnType("int");

                    b.Property<int>("Inpection4PointSysId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("MajorFour")
                        .HasColumnType("int");

                    b.Property<int?>("MajorOne")
                        .HasColumnType("int");

                    b.Property<int?>("MajorThree")
                        .HasColumnType("int");

                    b.Property<int?>("MajorTwo")
                        .HasColumnType("int");

                    b.Property<int?>("MinorFour")
                        .HasColumnType("int");

                    b.Property<int?>("MinorOne")
                        .HasColumnType("int");

                    b.Property<int?>("MinorThree")
                        .HasColumnType("int");

                    b.Property<int?>("MinorTwo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCorrectiveActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemRootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTimelineId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Inpection4PointSysId");

                    b.ToTable("InspectionDefectCapturing4PointSys", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturingTCStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Defect")
                        .HasColumnType("int");

                    b.Property<int>("InpectionTCStandardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCorrectiveActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemRootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTimelineId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("InpectionTCStandardId");

                    b.ToTable("InspectionDefectCapturingTCStandard", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectError100PointSys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ErrorType")
                        .HasColumnType("tinyint");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<int>("InspectionDefectCapturing100PointSysId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("To")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InspectionDefectCapturing100PointSysId");

                    b.ToTable("InspectionDefectError100PointSys", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectError4PointSys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ErrorType")
                        .HasColumnType("tinyint");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<int>("InspectionDefectCapturing4PointSysId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("To")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InspectionDefectCapturing4PointSysId");

                    b.ToTable("InspectionDefectError4PointSys", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionMesurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Critial")
                        .HasColumnType("int");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCorrectiveActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemRootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTimelineId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionMesurement", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.OneHundredPointSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefectCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DefectQuantityFrom")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQuantityTo")
                        .HasColumnType("int");

                    b.Property<int>("FabricWeightId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int?>("Soc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FabricWeightId");

                    b.ToTable("OneHundredPointSystem", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.ProblemCorrectiveAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DivisonId")
                        .HasColumnType("int");

                    b.Property<string>("DivisonName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte?>("InspectionType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameEN")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameVN")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ProblemCorrectiveAction", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.ProblemRootCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DivisonId")
                        .HasColumnType("int");

                    b.Property<string>("DivisonName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte?>("InspectionType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameEN")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameVN")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ProblemRootCause", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.ProblemTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DivisonId")
                        .HasColumnType("int");

                    b.Property<string>("DivisonName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte?>("InspectionType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameEN")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameVN")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ProblemTimeline", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DivisonId")
                        .HasColumnType("int");

                    b.Property<string>("DivisonName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("InspectionType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ParrentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QCDefecTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SubCategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("QCDefecTypeId");

                    b.ToTable("QCDefect", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("QCDefectType", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AcceptanceValue")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Buyer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Category")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ConversionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SamplingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ConversionId");

                    b.HasIndex("SamplingId");

                    b.ToTable("QCDefinition", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefinitionDefect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefinitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QCDefectId");

                    b.HasIndex("QCDefinitionId");

                    b.ToTable("QCDefinitionDefect", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QCDefinitionCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("QCRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("QCRequestNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("QCRequestStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("QCType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RequestedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("SiteCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SiteName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("TransferStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("WFXQCDefName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("QCRequest", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Buyer")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ColorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FPONo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("GRNDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GRNNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("GRNQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Lot")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OCNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PONo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("QCReleasedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("QCRequestId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Season")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Shade")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SizeCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SizeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StyleName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StyleNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UOM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("QCRequestId");

                    b.ToTable("QCRequestArticle", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Sampling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AQLVersionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcceptanceQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FabricWeightId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FixedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("FourPointSystemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PercentAcceptance")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("PercentQC")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<byte>("StandardType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AQLVersionId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FabricWeightId");

                    b.HasIndex("FourPointSystemId");

                    b.ToTable("Sampling", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TestGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("TestGroupId");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.TestGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Buyer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Category")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("GroupType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TestGroup", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.ZoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ZoneType", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQL", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.AQLVersion", "AQLVersion")
                        .WithMany("AQLs")
                        .HasForeignKey("AQLVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AQLVersion");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inpection100PointSys", "Inpection100PointSys")
                        .WithMany("Attachments")
                        .HasForeignKey("Inpection100PointSysId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inpection4PointSys", "Inpection4PointSys")
                        .WithMany("Attachments")
                        .HasForeignKey("Inpection4PointSysId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.InpectionTCStandard", "InpectionTCStandard")
                        .WithMany("Attachments")
                        .HasForeignKey("InpectionTCStandardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("Attachments")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inpection100PointSys");

                    b.Navigation("Inpection4PointSys");

                    b.Navigation("InpectionTCStandard");

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inpection100PointSys", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", "QCRequestArticle")
                        .WithOne("Inpection100PointSys")
                        .HasForeignKey("Shopfloor.Inspection.Domain.Entities.Inpection100PointSys", "QCRequestArticleId");

                    b.Navigation("QCRequestArticle");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inpection4PointSys", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", "QCRequestArticle")
                        .WithOne("Inpection4PointSys")
                        .HasForeignKey("Shopfloor.Inspection.Domain.Entities.Inpection4PointSys", "QCRequestArticleId");

                    b.Navigation("QCRequestArticle");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InpectionTCStandard", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", "QCRequestArticle")
                        .WithOne("InpectionTCStandard")
                        .HasForeignKey("Shopfloor.Inspection.Domain.Entities.InpectionTCStandard", "QCRequestArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCRequestArticle");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inspection", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", "QCRequestArticle")
                        .WithOne("Inspection")
                        .HasForeignKey("Shopfloor.Inspection.Domain.Entities.Inspection", "QCRequestArticleId");

                    b.Navigation("QCRequestArticle");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionBySize", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionBySizes")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionDefectCapturings")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing100PointSys", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inpection100PointSys", "Inpection100PointSys")
                        .WithMany("InspectionDefectCapturing100PointSyss")
                        .HasForeignKey("Inpection100PointSysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inpection100PointSys");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing4PointSys", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inpection4PointSys", "Inpection4PointSys")
                        .WithMany("InspectionDefectCapturing4PointSyss")
                        .HasForeignKey("Inpection4PointSysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inpection4PointSys");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturingTCStandard", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.InpectionTCStandard", "InpectionTCStandard")
                        .WithMany("InspectionDefectCapturingTCStandards")
                        .HasForeignKey("InpectionTCStandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InpectionTCStandard");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectError100PointSys", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing100PointSys", "InspectionDefectCapturing100PointSys")
                        .WithMany("InspectionDefectError100PointSyss")
                        .HasForeignKey("InspectionDefectCapturing100PointSysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionDefectCapturing100PointSys");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectError4PointSys", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing4PointSys", "InspectionDefectCapturing4PointSys")
                        .WithMany("InspectionDefectError4PointSyss")
                        .HasForeignKey("InspectionDefectCapturing4PointSysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionDefectCapturing4PointSys");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionMesurement", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionMesurements")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.OneHundredPointSystem", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.FabricWeight", "FabricWeight")
                        .WithMany("OneHundredPointSystems")
                        .HasForeignKey("FabricWeightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FabricWeight");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefect", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCDefectType", "QCDefectType")
                        .WithMany("QCDefects")
                        .HasForeignKey("QCDefecTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QCDefectType");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefinition", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Conversion", "Conversion")
                        .WithMany("QCDefinitions")
                        .HasForeignKey("ConversionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Sampling", "Sampling")
                        .WithMany("QCDefinitions")
                        .HasForeignKey("SamplingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversion");

                    b.Navigation("Sampling");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefinitionDefect", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCDefect", "QCDefect")
                        .WithMany("QCDefinitionDefects")
                        .HasForeignKey("QCDefectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCDefinition", "QCDefinition")
                        .WithMany("QCDefinitionDefects")
                        .HasForeignKey("QCDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QCDefect");

                    b.Navigation("QCDefinition");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCRequest", "QCRequest")
                        .WithMany("QCRequestArticles")
                        .HasForeignKey("QCRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCRequest");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Sampling", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.AQLVersion", "AQLVersion")
                        .WithMany("Samplings")
                        .HasForeignKey("AQLVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.FabricWeight", "FabricWeight")
                        .WithMany("Samplings")
                        .HasForeignKey("FabricWeightId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.FourPointSystem", "FourPointSystem")
                        .WithMany("Samplings")
                        .HasForeignKey("FourPointSystemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AQLVersion");

                    b.Navigation("FabricWeight");

                    b.Navigation("FourPointSystem");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Test", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.TestGroup", "TestGroup")
                        .WithMany("Tests")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestGroup");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQLVersion", b =>
                {
                    b.Navigation("AQLs");

                    b.Navigation("Samplings");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Conversion", b =>
                {
                    b.Navigation("QCDefinitions");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FabricWeight", b =>
                {
                    b.Navigation("OneHundredPointSystems");

                    b.Navigation("Samplings");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FourPointSystem", b =>
                {
                    b.Navigation("Samplings");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inpection100PointSys", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("InspectionDefectCapturing100PointSyss");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inpection4PointSys", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("InspectionDefectCapturing4PointSyss");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InpectionTCStandard", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("InspectionDefectCapturingTCStandards");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inspection", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("InspectionBySizes");

                    b.Navigation("InspectionDefectCapturings");

                    b.Navigation("InspectionMesurements");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing100PointSys", b =>
                {
                    b.Navigation("InspectionDefectError100PointSyss");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing4PointSys", b =>
                {
                    b.Navigation("InspectionDefectError4PointSyss");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefect", b =>
                {
                    b.Navigation("QCDefinitionDefects");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefectType", b =>
                {
                    b.Navigation("QCDefects");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCDefinition", b =>
                {
                    b.Navigation("QCDefinitionDefects");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequest", b =>
                {
                    b.Navigation("QCRequestArticles");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", b =>
                {
                    b.Navigation("Inpection100PointSys");

                    b.Navigation("Inpection4PointSys");

                    b.Navigation("InpectionTCStandard");

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Sampling", b =>
                {
                    b.Navigation("QCDefinitions");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.TestGroup", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
