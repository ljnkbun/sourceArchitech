// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopfloor.Inspection.Infrastructure.Contexts;

#nullable disable

namespace Shopfloor.Inspection.Infrastructure.Migrations
{
    [DbContext(typeof(InspectionContext))]
    [Migration("20240131034355_Add-QCRequest")]
    partial class AddQCRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AQLVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("Accept")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LotSizeFrom")
                        .HasColumnType("int");

                    b.Property<int>("LotSizeTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Reject")
                        .HasColumnType("int");

                    b.Property<int>("SampleSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AQLVersionId");

                    b.ToTable("AQL", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQLVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AQLVersion", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Conversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Conversion", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FabricWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FabricWeight", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FourPointSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FourPointSystem", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CuttingTable")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("DefaultResult")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("InspectionQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsCreatedFromProduction")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("MeasurementQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("MeasurementResult")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QCRequestArticleID")
                        .HasColumnType("int");

                    b.Property<string>("QCRequestNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SamplePlan")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("SampleQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Stage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Style")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalDefect")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("UserResult")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Inspection", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionBySize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("BGroupQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("BGroupUsable")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ColorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExcessShortageQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("GRNQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<decimal>("InspectionQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Lot")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("LotQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfDefect")
                        .HasColumnType("int");

                    b.Property<decimal>("OKQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("PreInspectedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("QCRequestDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonforBGroup")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Shade")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SizeCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SizeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionBySize", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Critial")
                        .HasColumnType("int");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCorrectiveActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemRootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTimelineId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefinitionDefectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionDefectCapturing", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ErrorType")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("From")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("To")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionDefectError", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionMesurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Critial")
                        .HasColumnType("int");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCorrectiveActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemRootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTimelineId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefinitionDefectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionMesurement", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.OneHundredPointSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefectCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DefectQuantityFrom")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQuantityTo")
                        .HasColumnType("int");

                    b.Property<int>("FabricWeightId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int?>("Soc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FabricWeightId");

                    b.ToTable("OneHundredPointSystem", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QCDefinitionCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("QCRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("QCRequestNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("QCRequestStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("QCType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RequestedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("SiteCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SiteName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("TransferStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("WFXQCDefName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("QCRequest", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Buyer")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FPONo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("GRNDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GRNNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Lot")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OCNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PONo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QCRequestId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Season")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Shade")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StyleName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StyleNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UOM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("QCRequestId");

                    b.ToTable("QCRequestArticle", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ColorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GRNQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QCReleasedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("QCRequestArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("SizeCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SizeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QCRequestArticleId");

                    b.ToTable("QCRequestDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Sampling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AQLVersionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcceptanceQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FabricWeightId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FixedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("FourPointSystemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PercentAcceptance")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("PercentQC")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<byte>("StandardType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AQLVersionId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FabricWeightId");

                    b.HasIndex("FourPointSystemId");

                    b.ToTable("Sampling", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TestGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("TestGroupId");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.TestGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Buyer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Category")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("GroupType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TestGroup", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQL", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.AQLVersion", "AQLVersion")
                        .WithMany("AQLs")
                        .HasForeignKey("AQLVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AQLVersion");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("Attachments")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionBySize", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionBySizes")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectCapturing", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionDefectCapturings")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionDefectError", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionDefectErrors")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.InspectionMesurement", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionMesurements")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.OneHundredPointSystem", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.FabricWeight", "FabricWeight")
                        .WithMany("OneHundredPointSystems")
                        .HasForeignKey("FabricWeightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FabricWeight");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCRequest", "QCRequest")
                        .WithMany("QCRequestArticles")
                        .HasForeignKey("QCRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCRequest");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestDetail", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", "QCRequestArticle")
                        .WithMany("QCRequestDetails")
                        .HasForeignKey("QCRequestArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCRequestArticle");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Sampling", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.AQLVersion", "AQLVersion")
                        .WithMany("Samplings")
                        .HasForeignKey("AQLVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.FabricWeight", "FabricWeight")
                        .WithMany("Samplings")
                        .HasForeignKey("FabricWeightId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shopfloor.Inspection.Domain.Entities.FourPointSystem", "FourPointSystem")
                        .WithMany("Samplings")
                        .HasForeignKey("FourPointSystemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AQLVersion");

                    b.Navigation("FabricWeight");

                    b.Navigation("FourPointSystem");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Test", b =>
                {
                    b.HasOne("Shopfloor.Inspection.Domain.Entities.TestGroup", "TestGroup")
                        .WithMany("Tests")
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestGroup");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.AQLVersion", b =>
                {
                    b.Navigation("AQLs");

                    b.Navigation("Samplings");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FabricWeight", b =>
                {
                    b.Navigation("OneHundredPointSystems");

                    b.Navigation("Samplings");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.FourPointSystem", b =>
                {
                    b.Navigation("Samplings");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.Inspection", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("InspectionBySizes");

                    b.Navigation("InspectionDefectCapturings");

                    b.Navigation("InspectionDefectErrors");

                    b.Navigation("InspectionMesurements");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequest", b =>
                {
                    b.Navigation("QCRequestArticles");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.QCRequestArticle", b =>
                {
                    b.Navigation("QCRequestDetails");
                });

            modelBuilder.Entity("Shopfloor.Inspection.Domain.Entities.TestGroup", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
