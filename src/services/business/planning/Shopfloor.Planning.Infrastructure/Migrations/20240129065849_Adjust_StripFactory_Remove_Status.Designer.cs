// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopfloor.Planning.Infrastructure.Contexts;

#nullable disable

namespace Shopfloor.Planning.Infrastructure.Migrations
{
    [DbContext(typeof(PlanningContext))]
    [Migration("20240129065849_Adjust_StripFactory_Remove_Status")]
    partial class Adjust_StripFactory_Remove_Status
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.CalendarConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CalendarName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Friday")
                        .HasColumnType("time");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsWorkOnHoliday")
                        .HasColumnType("bit");

                    b.Property<int?>("LineId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("Monday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Saturday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Sunday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Thursday")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("Tuesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Wednesday")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("CalendarConfig", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.CapacityColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("FromRange")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ToRange")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("CapacityColor", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.FactoryCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualCapacity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("FactoryName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("PlanningGroupFactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Standingcapacity")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("FactoryCapacity", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.LearningCurveDetailEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<decimal?>("EfficiencyValue")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LearningCurveEfficiencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LearningCurveEfficiencyId");

                    b.ToTable("LearningCurveDetailEfficiency", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.LearningCurveEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LearningCurveEfficiency", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.LineMachineCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("LineName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Standingcapacity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("WorkingHours")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("LineMachineCapacity", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.MergeSplitPOR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FromPORId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("ToPORId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPORId");

                    b.HasIndex("ToPORId");

                    b.ToTable("MergeSplitPOR", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.MergeSplitPorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FromPorDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("ToPorDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPorDetailId");

                    b.HasIndex("ToPorDetailId");

                    b.ToTable("MergeSplitPorDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.OrderEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EfficiencyValue")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderEfficiency", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.POR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ArticleName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("BOMId")
                        .HasColumnType("int");

                    b.Property<string>("BOMNo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Buyer")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Category")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsAllocated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OCNo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte?>("OCStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("0");

                    b.Property<string>("PORNo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProductGroup")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("RemainingQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte?>("TypePOR")
                        .HasColumnType("tinyint");

                    b.Property<int?>("WfxArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("WfxOCId")
                        .HasColumnType("int");

                    b.Property<int?>("WfxPORId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("POR", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.PORDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("OrderedQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("PORId")
                        .HasColumnType("int");

                    b.Property<decimal?>("RemainingQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Size")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte?>("TypePORDetail")
                        .HasColumnType("tinyint");

                    b.Property<string>("UOM")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("PORId");

                    b.ToTable("PORDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.ProfileEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductGroupCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ProductGroupName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ProfileEfficiency", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.ProfileEfficiencyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EfficiencyValue")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProfileEfficiencyId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProfileEfficiencyId");

                    b.ToTable("ProfileEfficiencyDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("EfficiencyValue")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StripScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StripEfficiency", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsAllocated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPlanning")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PORId")
                        .HasColumnType("int");

                    b.Property<int>("PlanningGroupFactoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PORId");

                    b.ToTable("StripFactory", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PorDetailId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("RemainingQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Size")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StripFactoryId")
                        .HasColumnType("int");

                    b.Property<byte?>("TypePORDetail")
                        .HasColumnType("tinyint");

                    b.Property<string>("UOM")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("StripFactoryId");

                    b.ToTable("StripFactoryDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactorySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StripFactoryId")
                        .HasColumnType("int");

                    b.Property<int>("StripScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StripFactoryId");

                    b.HasIndex("StripScheduleId");

                    b.ToTable("StripFactorySchedule", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactoryScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StripFactoryDetailId")
                        .HasColumnType("int");

                    b.Property<int>("StripScheduleDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StripFactoryDetailId");

                    b.HasIndex("StripScheduleDetailId");

                    b.ToTable("StripFactoryScheduleDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LearningCurveEfficiencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderEfficiencyId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileEfficiencyId")
                        .HasColumnType("int");

                    b.Property<int?>("StripEfficiencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("StripSchedule", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PorDetailId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("RemainingQuantity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Size")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StripScheduleId")
                        .HasColumnType("int");

                    b.Property<byte?>("TypePORDetail")
                        .HasColumnType("tinyint");

                    b.Property<string>("UOM")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("StripScheduleId");

                    b.ToTable("StripScheduleDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripSchedulePlanningDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualCapacity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("StandardCapacity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("StripScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StripScheduleId");

                    b.ToTable("StripSchedulePlanningDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.LearningCurveDetailEfficiency", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.LearningCurveEfficiency", "LearningCurveEfficiency")
                        .WithMany("LearningCurveDetailEfficiencies")
                        .HasForeignKey("LearningCurveEfficiencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LearningCurveEfficiency");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.MergeSplitPOR", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.POR", "FromPOR")
                        .WithMany("FromMergeSplitPORs")
                        .HasForeignKey("FromPORId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shopfloor.Planning.Domain.Entities.POR", "ToPOR")
                        .WithMany("ToMergeSplitPORs")
                        .HasForeignKey("ToPORId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromPOR");

                    b.Navigation("ToPOR");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.MergeSplitPorDetail", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.PORDetail", "FromPorDetail")
                        .WithMany("FromMergeSplitPorDetails")
                        .HasForeignKey("FromPorDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shopfloor.Planning.Domain.Entities.PORDetail", "ToPorDetail")
                        .WithMany("ToMergeSplitPorDetails")
                        .HasForeignKey("ToPorDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromPorDetail");

                    b.Navigation("ToPorDetail");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.PORDetail", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.POR", "POR")
                        .WithMany("PORDetails")
                        .HasForeignKey("PORId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("POR");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.ProfileEfficiencyDetail", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.ProfileEfficiency", "ProfileEfficiencies")
                        .WithMany("ProfileEfficiencyDetails")
                        .HasForeignKey("ProfileEfficiencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProfileEfficiencies");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactory", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.POR", "Por")
                        .WithMany("StripFactories")
                        .HasForeignKey("PORId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Por");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactoryDetail", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.StripFactory", "StripFactory")
                        .WithMany("StripFactoryDetails")
                        .HasForeignKey("StripFactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripFactory");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactorySchedule", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.StripFactory", "StripFactory")
                        .WithMany("StripFactorySchedules")
                        .HasForeignKey("StripFactoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shopfloor.Planning.Domain.Entities.StripSchedule", "StripSchedule")
                        .WithMany("StripFactorySchedules")
                        .HasForeignKey("StripScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripFactory");

                    b.Navigation("StripSchedule");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactoryScheduleDetail", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.StripFactoryDetail", "StripFactoryDetail")
                        .WithMany("StripFactoryScheduleDetails")
                        .HasForeignKey("StripFactoryDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopfloor.Planning.Domain.Entities.StripScheduleDetail", "StripScheduleDetail")
                        .WithMany()
                        .HasForeignKey("StripScheduleDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripFactoryDetail");

                    b.Navigation("StripScheduleDetail");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripScheduleDetail", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.StripSchedule", "StripSchedule")
                        .WithMany("StripScheduleDetails")
                        .HasForeignKey("StripScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripSchedule");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripSchedulePlanningDetail", b =>
                {
                    b.HasOne("Shopfloor.Planning.Domain.Entities.StripSchedule", "StripSchedule")
                        .WithMany("StripSchedulePlanningDetails")
                        .HasForeignKey("StripScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripSchedule");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.LearningCurveEfficiency", b =>
                {
                    b.Navigation("LearningCurveDetailEfficiencies");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.POR", b =>
                {
                    b.Navigation("FromMergeSplitPORs");

                    b.Navigation("PORDetails");

                    b.Navigation("StripFactories");

                    b.Navigation("ToMergeSplitPORs");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.PORDetail", b =>
                {
                    b.Navigation("FromMergeSplitPorDetails");

                    b.Navigation("ToMergeSplitPorDetails");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.ProfileEfficiency", b =>
                {
                    b.Navigation("ProfileEfficiencyDetails");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactory", b =>
                {
                    b.Navigation("StripFactoryDetails");

                    b.Navigation("StripFactorySchedules");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripFactoryDetail", b =>
                {
                    b.Navigation("StripFactoryScheduleDetails");
                });

            modelBuilder.Entity("Shopfloor.Planning.Domain.Entities.StripSchedule", b =>
                {
                    b.Navigation("StripFactorySchedules");

                    b.Navigation("StripScheduleDetails");

                    b.Navigation("StripSchedulePlanningDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
