// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopfloor.Production.Infrastructure.Contexts;

#nullable disable

namespace Shopfloor.Production.Infrastructure.Migrations
{
    [DbContext(typeof(ProductionContext))]
    partial class ProductionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DefectCapturing100PointsId")
                        .HasColumnType("int");

                    b.Property<int?>("DefectCapturing4PointsId")
                        .HasColumnType("int");

                    b.Property<int?>("DefectCapturingStandardId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductionOutputId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefectCapturing100PointsId")
                        .IsUnique()
                        .HasFilter("[DefectCapturing100PointsId] IS NOT NULL");

                    b.HasIndex("DefectCapturing4PointsId")
                        .IsUnique()
                        .HasFilter("[DefectCapturing4PointsId] IS NOT NULL");

                    b.HasIndex("DefectCapturingStandardId")
                        .IsUnique()
                        .HasFilter("[DefectCapturingStandardId] IS NOT NULL");

                    b.HasIndex("ProductionOutputId")
                        .IsUnique()
                        .HasFilter("[ProductionOutputId] IS NOT NULL");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectActionIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CorrectActionName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Critical")
                        .HasColumnType("int");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte?>("IsLongError")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("LongErrorFrom")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("LongErrorTo")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("Major")
                        .HasColumnType("int");

                    b.Property<int?>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PersonInChargeIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PersonInChargeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductionOutputId")
                        .HasColumnType("int");

                    b.Property<int?>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("RootCauseIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RootCauseName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOutputId");

                    b.ToTable("DefectCapturing", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing100Points", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectActionIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CorrectActionName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Critial")
                        .HasColumnType("int");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte?>("IsLongError")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("LongErrorFrom")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("LongErrorTo")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("Major")
                        .HasColumnType("int");

                    b.Property<int?>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PersonInChargeIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PersonInChargeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductionOutputId")
                        .HasColumnType("int");

                    b.Property<int?>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RootCauseIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RootCauseName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOutputId");

                    b.ToTable("DefectCapturing100Points", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing4Points", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectActionIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CorrectActionName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DefectQtyFour")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQtyOne")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQtyThree")
                        .HasColumnType("int");

                    b.Property<int?>("DefectQtyTwo")
                        .HasColumnType("int");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte?>("IsLongError")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("LongErrorFrom")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("LongErrorTo")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("MajorFour")
                        .HasColumnType("int");

                    b.Property<int?>("MajorOne")
                        .HasColumnType("int");

                    b.Property<int?>("MajorThree")
                        .HasColumnType("int");

                    b.Property<int?>("MajorTwo")
                        .HasColumnType("int");

                    b.Property<int?>("MinorFour")
                        .HasColumnType("int");

                    b.Property<int?>("MinorOne")
                        .HasColumnType("int");

                    b.Property<int?>("MinorThree")
                        .HasColumnType("int");

                    b.Property<int?>("MinorTwo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PersonInChargeIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PersonInChargeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductionOutputId")
                        .HasColumnType("int");

                    b.Property<int?>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("RootCauseIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RootCauseName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOutputId");

                    b.ToTable("DefectCapturing4Points", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturingStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectiveActionIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Defect")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonInChargeIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductionOutputId")
                        .HasColumnType("int");

                    b.Property<int?>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RootCauseIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOutputId");

                    b.ToTable("DefectCapturingStandard", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.FPPOOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("End")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FPPOId")
                        .HasColumnType("int");

                    b.Property<string>("FPPONo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("JobOrderNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LineId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OCNo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OperationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("OperationName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PORId")
                        .HasColumnType("int");

                    b.Property<string>("PORNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProcessCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("QCDefinationId")
                        .HasColumnType("int");

                    b.Property<string>("QCName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Start")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UOM")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("WFXArticleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FPPOOutput", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.FPPOOutputDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BalanceQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FPPOOutputId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("MadeQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PlannedQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Size")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FPPOOutputId");

                    b.ToTable("FPPOOutputDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.InspectionBySize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ArticleBarcodeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("BGroupQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("CaptureMeter")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CuttingWidth")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("FPPOOutputDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("MadeQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("OKQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("ProductionOutputId")
                        .HasColumnType("int");

                    b.Property<decimal?>("RejectQty")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Remark")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("WarpDensity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("WeftDensity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("FPPOOutputDetailId");

                    b.HasIndex("ProductionOutputId");

                    b.ToTable("InspectionBySize", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectActionIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Critical")
                        .HasColumnType("int");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Major")
                        .HasColumnType("int");

                    b.Property<int?>("Minor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PersonInChargeIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductionOutputId")
                        .HasColumnType("int");

                    b.Property<int?>("QCDefectId")
                        .HasColumnType("int");

                    b.Property<string>("RootCauseIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOutputId");

                    b.ToTable("Measurement", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.ProductionOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("CaptureMeter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FPPOOutputId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("InputDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonInChargeId")
                        .HasColumnType("int");

                    b.Property<int>("PointSquareMeter")
                        .HasColumnType("int");

                    b.Property<int?>("QCDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StockMovementNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("SystemResult")
                        .HasColumnType("bit");

                    b.Property<int>("TotalContDefect")
                        .HasColumnType("int");

                    b.Property<int>("TotalDefect")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoint")
                        .HasColumnType("int");

                    b.Property<bool>("UserResult")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("WFXExportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("WFXExportStatus")
                        .HasColumnType("tinyint");

                    b.Property<int?>("WarpDensity")
                        .HasColumnType("int");

                    b.Property<int?>("WeftDensity")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeightGM2")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ProductionOutput", (string)null);
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.DefectCapturing100Points", "DefectCapturing100Points")
                        .WithOne("Attachment")
                        .HasForeignKey("Shopfloor.Production.Domain.Entities.Attachment", "DefectCapturing100PointsId");

                    b.HasOne("Shopfloor.Production.Domain.Entities.DefectCapturing4Points", "DefectCapturing4Points")
                        .WithOne("Attachment")
                        .HasForeignKey("Shopfloor.Production.Domain.Entities.Attachment", "DefectCapturing4PointsId");

                    b.HasOne("Shopfloor.Production.Domain.Entities.DefectCapturingStandard", "DefectCapturingStandard")
                        .WithOne("Attachment")
                        .HasForeignKey("Shopfloor.Production.Domain.Entities.Attachment", "DefectCapturingStandardId");

                    b.HasOne("Shopfloor.Production.Domain.Entities.ProductionOutput", "ProductionOutput")
                        .WithOne("Attachment")
                        .HasForeignKey("Shopfloor.Production.Domain.Entities.Attachment", "ProductionOutputId");

                    b.Navigation("DefectCapturing100Points");

                    b.Navigation("DefectCapturing4Points");

                    b.Navigation("DefectCapturingStandard");

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.ProductionOutput", "ProductionOutput")
                        .WithMany("DefectCapturings")
                        .HasForeignKey("ProductionOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing100Points", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.ProductionOutput", "ProductionOutput")
                        .WithMany("DefectCapturing100Points")
                        .HasForeignKey("ProductionOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing4Points", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.ProductionOutput", "ProductionOutput")
                        .WithMany("DefectCapturing4Points")
                        .HasForeignKey("ProductionOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturingStandard", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.ProductionOutput", "ProductionOutput")
                        .WithMany("DefectCapturingStandards")
                        .HasForeignKey("ProductionOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.FPPOOutputDetail", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.FPPOOutput", "FPPOOutput")
                        .WithMany("FPPODetails")
                        .HasForeignKey("FPPOOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FPPOOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.InspectionBySize", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.FPPOOutputDetail", "FPPOOutputDetail")
                        .WithMany()
                        .HasForeignKey("FPPOOutputDetailId");

                    b.HasOne("Shopfloor.Production.Domain.Entities.ProductionOutput", "ProductionOutput")
                        .WithMany("InspectionBySizes")
                        .HasForeignKey("ProductionOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FPPOOutputDetail");

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.Measurement", b =>
                {
                    b.HasOne("Shopfloor.Production.Domain.Entities.ProductionOutput", "ProductionOutput")
                        .WithMany("Measurements")
                        .HasForeignKey("ProductionOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing100Points", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturing4Points", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.DefectCapturingStandard", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.FPPOOutput", b =>
                {
                    b.Navigation("FPPODetails");
                });

            modelBuilder.Entity("Shopfloor.Production.Domain.Entities.ProductionOutput", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("DefectCapturing100Points");

                    b.Navigation("DefectCapturing4Points");

                    b.Navigation("DefectCapturingStandards");

                    b.Navigation("DefectCapturings");

                    b.Navigation("InspectionBySizes");

                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
