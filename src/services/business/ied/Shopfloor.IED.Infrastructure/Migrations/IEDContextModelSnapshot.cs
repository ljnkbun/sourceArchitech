// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopfloor.IED.Infrastructure.Contexts;

#nullable disable

namespace Shopfloor.IED.Infrastructure.Migrations
{
    [DbContext(typeof(IEDContext))]
    partial class IEDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.AutoIncrement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("IndexFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Separate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("AutoIncrements");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Concentrate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Concentrate", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DCTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("DCTemplate", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DCTemplateDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChemicalCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ChemicalName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DCTemplateTaskId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("DCTemplateTaskId");

                    b.ToTable("DCTemplateDetail", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DCTemplateTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DCTemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Temperature")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DCTemplateId");

                    b.ToTable("DCTemplateTask", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ArticleId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DyeingTBRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FabricContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Lights")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MaterialType")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBRequestId");

                    b.ToTable("DyeingTBMaterial", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBMaterialColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DyeingTBMaterialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pantone")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBMaterialId");

                    b.ToTable("DyeingTBMaterialColor", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRCValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DyeingTBRChemicalId")
                        .HasColumnType("int");

                    b.Property<int>("DyeingTBRVersionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBRVersionId");

                    b.ToTable("DyeingTBRCValue", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRChemical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChemicalCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ChemicalId")
                        .HasColumnType("int");

                    b.Property<string>("ChemicalName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DyeingTBRTaskId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBRTaskId");

                    b.ToTable("DyeingTBRChemical", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DyeingOperationId")
                        .HasColumnType("int");

                    b.Property<string>("DyeingOperationName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DyeingProcessId")
                        .HasColumnType("int");

                    b.Property<string>("DyeingProcessName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DyeingTBRecipeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MachineCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MachineName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBRecipeId");

                    b.ToTable("DyeingTBRTask", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DoTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DyeingTBRecipeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBRecipeId");

                    b.ToTable("DyeingTBRVersion", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApproveVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Buyer")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BuyerRef")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Color")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Concentration")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DyeingTBMaterialColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GarmentStyleRef")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("TBRecipeNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TCFNo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("VersionQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBMaterialColorId");

                    b.ToTable("DyeingTBRecipe", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Buyer")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BuyerRef")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNo")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StyleRef")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("DyeingTBRequest", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRequestFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DyeingTBRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FileId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DyeingTBRequestId");

                    b.ToTable("DyeingTBRequestFile", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.FolderTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("DivisionType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte>("ItemType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("FolderTree", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expression")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProcessCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Formula", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.FormulaField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FormulaField", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.LabourSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LabourSkill", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Light", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Light", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.ProcessTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProcessTask", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.ProcessTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ProcessTemplate", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.ProcessTemplateItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProcessTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTemplateId");

                    b.ToTable("ProcessTemplateItem", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DyeingTBRVersionId")
                        .HasColumnType("int");

                    b.Property<int>("DyeingTBRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FabricCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FabricName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InCharge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("JobDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LAB")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LotNo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Manager")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Method")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NozzleA")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NozzleB")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RecipeNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RollKg")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Speed")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Style")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TCFNO")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RecipeChemical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChemicalCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ChemicalName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RecipeTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeTaskId");

                    b.ToTable("RecipeChemical", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RecipeTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DyeingOpreation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MachineType")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeTask", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RecipeUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("RecipeUnit", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StatusComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestArticleInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ArticleName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestArticleOutputId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestArticleOutputId");

                    b.ToTable("RequestArticleInput", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestArticleOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ArticleName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestDivisionProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestDivisionProcessId");

                    b.ToTable("RequestArticleOutput", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DivisionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestDivision", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivisionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestDivisionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestDivisionId");

                    b.ToTable("RequestDivisionFile", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivisionProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RequestDivisionId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RequestDivisionId");

                    b.ToTable("RequestDivisionProcess", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("RequestType", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllowedTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("LabourCost")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("LineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalSMV")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("SewingFeature", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeatureBOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllowedTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Freq")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RPM")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("SMV")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("SewingFeatureId")
                        .HasColumnType("int");

                    b.Property<int>("SewingOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SewingFeatureId");

                    b.HasIndex("SewingOperationId");

                    b.ToTable("SewingFeatureBOL", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeatureLib", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllowedTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FolderTreeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabourCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSMV")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FolderTreeId");

                    b.ToTable("SewingFeatureLibs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeatureLibBOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllowedTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Freq")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RPM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SMV")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SewingFeatureLibId")
                        .HasColumnType("int");

                    b.Property<int>("SewingOperationLibId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SewingFeatureLibId");

                    b.HasIndex("SewingOperationLibId");

                    b.ToTable("SewingFeatureLibBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BundleTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("MachineTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("ManualTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("NoneMachineTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("TotalBasicMinutes")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("SewingMacro", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacroBOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Freq")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SewingMacroId")
                        .HasColumnType("int");

                    b.Property<int>("SewingTaskId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("SewingMacroId");

                    b.HasIndex("SewingTaskId");

                    b.ToTable("SewingMacroBOL", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacroLib", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BundleTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FolderTreeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("MachineTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("ManualTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("NoneMachineTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("TotalBasicMinutes")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("FolderTreeId");

                    b.ToTable("SewingMacroLib", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacroLibBOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Freq")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SewingMacroLibId")
                        .HasColumnType("int");

                    b.Property<int>("SewingTaskLibId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SewingMacroLibId");

                    b.HasIndex("SewingTaskLibId");

                    b.ToTable("SewingMacroLibBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BundleTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("LabourCost")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("LineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MachineTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("ManualTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("NoneMachineTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("SewingOperation", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationBOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Freq")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SewingMacroId")
                        .HasColumnType("int");

                    b.Property<int>("SewingOperationId")
                        .HasColumnType("int");

                    b.Property<int?>("SewingTaskId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("SewingMacroId");

                    b.HasIndex("SewingOperationId");

                    b.HasIndex("SewingTaskId");

                    b.ToTable("SewingOperationBOL", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationLib", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BundleTMU")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FolderTreeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabourCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MachineTMU")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ManualTMU")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NoneMachineTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FolderTreeId");

                    b.ToTable("SewingOperationLibs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationLibBOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Freq")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SewingMacroLibId")
                        .HasColumnType("int");

                    b.Property<int>("SewingOperationLibId")
                        .HasColumnType("int");

                    b.Property<int?>("SewingTaskLibId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("SewingMacroLibId");

                    b.HasIndex("SewingOperationLibId");

                    b.HasIndex("SewingTaskLibId");

                    b.ToTable("SewingOperationLibBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationWFX", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllowedTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("ArticleCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Buyer")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentVersionId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FactoryOverheadAgainstLabourPercent")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("FactoryTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("LabourCostFactory")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("LabourCostFactoryIncludingOverhead")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("LabourCostOp")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductGroup")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProductSubCategory")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RequestDivisionProcessId")
                        .HasColumnType("int");

                    b.Property<decimal>("SMV")
                        .HasColumnType("decimal(28,8)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("WFXProcessCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WFXProcessName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("RequestDivisionProcessId");

                    b.ToTable("SewingOperationWFX", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationWFXVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SewingOperationWFXId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SewingOperationWFXId", "Version")
                        .IsUnique();

                    b.ToTable("SewingOperationWFXVersion", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingSubOperationWFX", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllowedTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("BundleTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Effort")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Freq")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("LabourCost")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("LineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MachineTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("ManualTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NonMachineTime")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("QualityComments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("QuatityPoints")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SewingOperationWFXVersionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSMV")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("WFXProcessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WFXProcessName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("SewingOperationWFXVersionId");

                    b.ToTable("SewingSubOperationWFX", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingSubOperationWFXBOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SewingFeatureId")
                        .HasColumnType("int");

                    b.Property<int?>("SewingOperationId")
                        .HasColumnType("int");

                    b.Property<int>("SewingSubOperationWFXId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("SewingFeatureId");

                    b.HasIndex("SewingOperationId");

                    b.HasIndex("SewingSubOperationWFXId");

                    b.ToTable("SewingSubOperationWFXBOL", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingSubOperationWFXResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasicMunite")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("Contingency")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("MachineDelay")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PersonalAllowance")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("SMV")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("SewingSubOperationWFXId")
                        .HasColumnType("int");

                    b.Property<decimal>("TMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<byte>("TMUType")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("SewingSubOperationWFXId", "TMUType")
                        .IsUnique();

                    b.ToTable("SewingSubOperationWFXResult", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BundleTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Freq")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MachineTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("ManualTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("SewingTask", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingTaskLib", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BundleTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Freq")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("MachineTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("ManualTMU")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalTMU")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.ToTable("SewingTaskLib", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Shade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Shade", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ArticleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeavingIEDId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeavingIEDId");

                    b.ToTable("WeavingArticle", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingBackgrounStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("WeavingBackgrounStyle", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingBorderStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("WeavingBorderStyle", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingDetailStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CombString")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int");

                    b.Property<byte>("StructureType")
                        .HasColumnType("tinyint");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("WeavingArticleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeavingArticleId");

                    b.ToTable("WeavingDetailStructure", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingIED", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestDivisionId")
                        .HasColumnType("int");

                    b.Property<string>("RequestNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RequestDivisionId");

                    b.ToTable("WeavingIED", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRappo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("HorizontalRappoComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumOfLine")
                        .HasColumnType("int");

                    b.Property<int>("NumOfRappo")
                        .HasColumnType("int");

                    b.Property<string>("VerticalRappoComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeavingArticleId")
                        .HasColumnType("int");

                    b.Property<int>("YarnOfBackground")
                        .HasColumnType("int");

                    b.Property<int>("YarnOfBorder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeavingArticleId");

                    b.ToTable("WeavingRappo", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRappoMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PatternIndex")
                        .HasColumnType("int");

                    b.Property<int>("WeavingRappoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeavingRappoId");

                    b.ToTable("WeavingRappoMark", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRappoMatric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BackgroundType")
                        .HasColumnType("int");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("HorizontalYarnId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LoopIndex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<int>("VerticleYarnId")
                        .HasColumnType("int");

                    b.Property<int>("WeavingRappoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HorizontalYarnId");

                    b.HasIndex("VerticleYarnId");

                    b.HasIndex("WeavingRappoId");

                    b.ToTable("WeavingRappoMatric", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRouting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeavingArticleId")
                        .HasColumnType("int");

                    b.Property<string>("WeavingOperation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WeavingProcess")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("WeavingArticleId");

                    b.ToTable("WeavingRouting", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRusticFabricSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BackgroundLoomFrame")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("BackgroundType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("BorderLoomFrame")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("BorderType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CombNum")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("CombSize")
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("HorizontalDensity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("HorizontalDensitySetting")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("HorizontalShrinkage")
                        .HasColumnType("decimal(28,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RPM")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("RusticSize")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("VerticalDensity")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("VerticalShrinkage")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("WeavingArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightGM")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("WeightGM2")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("WeavingArticleId");

                    b.ToTable("WeavingRusticFabricSpec", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingYarn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ScaleRatio")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("ScrapRatio")
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("SizingRatio")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("WeavingArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("WeavingRappoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("YarnCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("YarnInRappo")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("YarnName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("YarnRatio")
                        .HasColumnType("decimal(28,8)");

                    b.Property<byte>("YarnType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("WeavingArticleId");

                    b.HasIndex("WeavingRappoId");

                    b.ToTable("WeavingYarn", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ZoneSalary")
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Zone", (string)null);
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DCTemplateDetail", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DCTemplateTask", "DcTemplateTask")
                        .WithMany("DcTemplateDetails")
                        .HasForeignKey("DCTemplateTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DcTemplateTask");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DCTemplateTask", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DCTemplate", "DCTemplate")
                        .WithMany("DCTemplateTasks")
                        .HasForeignKey("DCTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCTemplate");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBMaterial", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBRequest", "DyeingTBRequest")
                        .WithMany("DyeingTBMaterials")
                        .HasForeignKey("DyeingTBRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBRequest");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBMaterialColor", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBMaterial", "DyeingTBMaterial")
                        .WithMany("DyeingTBMaterialColors")
                        .HasForeignKey("DyeingTBMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBMaterial");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRCValue", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBRVersion", "DyeingTBRVersion")
                        .WithMany("DyeingTBRCValues")
                        .HasForeignKey("DyeingTBRVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBRVersion");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRChemical", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBRTask", "DyeingTBRTask")
                        .WithMany("DyeingTBTaskChemicals")
                        .HasForeignKey("DyeingTBRTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBRTask");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRTask", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBRecipe", "DyeingTBRecipe")
                        .WithMany("DyeingTBRTasks")
                        .HasForeignKey("DyeingTBRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBRecipe");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRVersion", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBRecipe", "DyeingTBRecipe")
                        .WithMany("DyeingTBRVersions")
                        .HasForeignKey("DyeingTBRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBRecipe");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRecipe", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBMaterialColor", "DyeingTBMaterialColor")
                        .WithMany("DyeingTBRecipes")
                        .HasForeignKey("DyeingTBMaterialColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBMaterialColor");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRequestFile", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.DyeingTBRequest", "DyeingTBRequest")
                        .WithMany("DyeingTBRequestFiles")
                        .HasForeignKey("DyeingTBRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DyeingTBRequest");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.FolderTree", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.FolderTree", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.ProcessTemplateItem", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.ProcessTemplate", "ProcessTemplate")
                        .WithMany("ProcessTemplateItems")
                        .HasForeignKey("ProcessTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessTemplate");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RecipeChemical", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RecipeTask", "RecipeTask")
                        .WithMany("RecipeChemicals")
                        .HasForeignKey("RecipeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeTask");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RecipeTask", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.Recipe", "Recipe")
                        .WithMany("RecipeTasks")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Request", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RequestType", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestArticleInput", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RequestArticleOutput", "RequestArticleOutput")
                        .WithMany("RequestArticleInputs")
                        .HasForeignKey("RequestArticleOutputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestArticleOutput");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestArticleOutput", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RequestDivisionProcess", "RequestDivisionProcess")
                        .WithMany("RequestArticleOutputs")
                        .HasForeignKey("RequestDivisionProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestDivisionProcess");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivision", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.Request", "Request")
                        .WithMany("RequestDivisions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivisionFile", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RequestDivision", "RequestDivision")
                        .WithMany("RequestDivisionFiles")
                        .HasForeignKey("RequestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestDivision");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivisionProcess", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RequestDivision", "RequestDivision")
                        .WithMany("RequestDivisionProcesses")
                        .HasForeignKey("RequestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestDivision");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeatureBOL", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingFeature", "SewingFeature")
                        .WithMany("SewingFeatureBOLs")
                        .HasForeignKey("SewingFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingOperation", "SewingOperation")
                        .WithMany("SewingFeatureBOLs")
                        .HasForeignKey("SewingOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SewingFeature");

                    b.Navigation("SewingOperation");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeatureLib", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.FolderTree", "FolderTree")
                        .WithMany("SewingFeatureLibs")
                        .HasForeignKey("FolderTreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FolderTree");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeatureLibBOL", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingFeatureLib", "SewingFeatureLib")
                        .WithMany("SewingFeatureLibBOLs")
                        .HasForeignKey("SewingFeatureLibId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingOperationLib", "SewingOperationLib")
                        .WithMany("SewingFeatureLibBOLs")
                        .HasForeignKey("SewingOperationLibId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SewingFeatureLib");

                    b.Navigation("SewingOperationLib");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacroBOL", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingMacro", "SewingMacro")
                        .WithMany("SewingMacroBOLs")
                        .HasForeignKey("SewingMacroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingTask", "SewingTask")
                        .WithMany("SewingMacroBOLs")
                        .HasForeignKey("SewingTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SewingMacro");

                    b.Navigation("SewingTask");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacroLib", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.FolderTree", "FolderTree")
                        .WithMany("SewingMacroLibs")
                        .HasForeignKey("FolderTreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FolderTree");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacroLibBOL", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingMacroLib", "SewingMacroLib")
                        .WithMany("SewingMacroLibBOLs")
                        .HasForeignKey("SewingMacroLibId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingTaskLib", "SewingTaskLib")
                        .WithMany("SewingMacroLibBOLs")
                        .HasForeignKey("SewingTaskLibId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SewingMacroLib");

                    b.Navigation("SewingTaskLib");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationBOL", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingMacro", "SewingMacro")
                        .WithMany()
                        .HasForeignKey("SewingMacroId");

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingOperation", "SewingOperation")
                        .WithMany("SewingOperationBOLs")
                        .HasForeignKey("SewingOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingTask", "SewingTask")
                        .WithMany("SewingOperationBOLs")
                        .HasForeignKey("SewingTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SewingMacro");

                    b.Navigation("SewingOperation");

                    b.Navigation("SewingTask");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationLib", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.FolderTree", "FolderTree")
                        .WithMany("SewingOperationLibs")
                        .HasForeignKey("FolderTreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FolderTree");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationLibBOL", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingMacroLib", "SewingMacroLib")
                        .WithMany()
                        .HasForeignKey("SewingMacroLibId");

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingOperationLib", "SewingOperationLib")
                        .WithMany("SewingOperationLibBOLs")
                        .HasForeignKey("SewingOperationLibId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingTaskLib", "SewingTaskLib")
                        .WithMany("SewingOperationLibBOLs")
                        .HasForeignKey("SewingTaskLibId");

                    b.Navigation("SewingMacroLib");

                    b.Navigation("SewingOperationLib");

                    b.Navigation("SewingTaskLib");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationWFX", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RequestDivisionProcess", "RequestDivisionProcess")
                        .WithMany("SewingOperationWFXs")
                        .HasForeignKey("RequestDivisionProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestDivisionProcess");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationWFXVersion", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingOperationWFX", "SewingOperationWFX")
                        .WithMany("SewingOperationWFXVersions")
                        .HasForeignKey("SewingOperationWFXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SewingOperationWFX");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingSubOperationWFX", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingOperationWFXVersion", "SewingOperationWFXVersion")
                        .WithMany("SewingSubOperationWFXs")
                        .HasForeignKey("SewingOperationWFXVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SewingOperationWFXVersion");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingSubOperationWFXBOL", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingFeature", "SewingFeature")
                        .WithMany()
                        .HasForeignKey("SewingFeatureId");

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingOperation", "SewingOperation")
                        .WithMany()
                        .HasForeignKey("SewingOperationId");

                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingSubOperationWFX", "SewingSubOperationWFX")
                        .WithMany("SewingSubOperationWFXBOLs")
                        .HasForeignKey("SewingSubOperationWFXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SewingFeature");

                    b.Navigation("SewingOperation");

                    b.Navigation("SewingSubOperationWFX");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingSubOperationWFXResult", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.SewingSubOperationWFX", "SewingSubOperationWFX")
                        .WithMany()
                        .HasForeignKey("SewingSubOperationWFXId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SewingSubOperationWFX");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingArticle", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingIED", "WeavingIED")
                        .WithMany("WeavingArticles")
                        .HasForeignKey("WeavingIEDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeavingIED");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingDetailStructure", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingArticle", "WeavingArticle")
                        .WithMany("WeavingDetailStructures")
                        .HasForeignKey("WeavingArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeavingArticle");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingIED", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.RequestDivision", "RequestDivision")
                        .WithMany("WeavingIEDs")
                        .HasForeignKey("RequestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestDivision");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRappo", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingArticle", "WeavingArticle")
                        .WithMany("WeavingRappos")
                        .HasForeignKey("WeavingArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeavingArticle");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRappoMark", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingRappo", "WeavingRappo")
                        .WithMany("WeavingRappoMarks")
                        .HasForeignKey("WeavingRappoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeavingRappo");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRappoMatric", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingYarn", "HorizontalYarn")
                        .WithMany("WeavingHorizontalRappoMatrics")
                        .HasForeignKey("HorizontalYarnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingYarn", "VerticleYarn")
                        .WithMany("WeavingVerticleRappoMatrics")
                        .HasForeignKey("VerticleYarnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingRappo", "WeavingRappo")
                        .WithMany("WeavingRappoMatrics")
                        .HasForeignKey("WeavingRappoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HorizontalYarn");

                    b.Navigation("VerticleYarn");

                    b.Navigation("WeavingRappo");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRouting", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingArticle", "WeavingArticle")
                        .WithMany("WeavingRoutings")
                        .HasForeignKey("WeavingArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeavingArticle");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRusticFabricSpec", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingArticle", "WeavingArticle")
                        .WithMany("WeavingRusticFabricSpecs")
                        .HasForeignKey("WeavingArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeavingArticle");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingYarn", b =>
                {
                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingArticle", "WeavingArticle")
                        .WithMany("WeavingYarns")
                        .HasForeignKey("WeavingArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopfloor.IED.Domain.Entities.WeavingRappo", null)
                        .WithMany("WeavingYarns")
                        .HasForeignKey("WeavingRappoId");

                    b.Navigation("WeavingArticle");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DCTemplate", b =>
                {
                    b.Navigation("DCTemplateTasks");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DCTemplateTask", b =>
                {
                    b.Navigation("DcTemplateDetails");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBMaterial", b =>
                {
                    b.Navigation("DyeingTBMaterialColors");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBMaterialColor", b =>
                {
                    b.Navigation("DyeingTBRecipes");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRTask", b =>
                {
                    b.Navigation("DyeingTBTaskChemicals");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRVersion", b =>
                {
                    b.Navigation("DyeingTBRCValues");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRecipe", b =>
                {
                    b.Navigation("DyeingTBRTasks");

                    b.Navigation("DyeingTBRVersions");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.DyeingTBRequest", b =>
                {
                    b.Navigation("DyeingTBMaterials");

                    b.Navigation("DyeingTBRequestFiles");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.FolderTree", b =>
                {
                    b.Navigation("SewingFeatureLibs");

                    b.Navigation("SewingMacroLibs");

                    b.Navigation("SewingOperationLibs");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.ProcessTemplate", b =>
                {
                    b.Navigation("ProcessTemplateItems");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeTasks");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RecipeTask", b =>
                {
                    b.Navigation("RecipeChemicals");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.Request", b =>
                {
                    b.Navigation("RequestDivisions");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestArticleOutput", b =>
                {
                    b.Navigation("RequestArticleInputs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivision", b =>
                {
                    b.Navigation("RequestDivisionFiles");

                    b.Navigation("RequestDivisionProcesses");

                    b.Navigation("WeavingIEDs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestDivisionProcess", b =>
                {
                    b.Navigation("RequestArticleOutputs");

                    b.Navigation("SewingOperationWFXs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.RequestType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeature", b =>
                {
                    b.Navigation("SewingFeatureBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingFeatureLib", b =>
                {
                    b.Navigation("SewingFeatureLibBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacro", b =>
                {
                    b.Navigation("SewingMacroBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingMacroLib", b =>
                {
                    b.Navigation("SewingMacroLibBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperation", b =>
                {
                    b.Navigation("SewingFeatureBOLs");

                    b.Navigation("SewingOperationBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationLib", b =>
                {
                    b.Navigation("SewingFeatureLibBOLs");

                    b.Navigation("SewingOperationLibBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationWFX", b =>
                {
                    b.Navigation("SewingOperationWFXVersions");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingOperationWFXVersion", b =>
                {
                    b.Navigation("SewingSubOperationWFXs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingSubOperationWFX", b =>
                {
                    b.Navigation("SewingSubOperationWFXBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingTask", b =>
                {
                    b.Navigation("SewingMacroBOLs");

                    b.Navigation("SewingOperationBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.SewingTaskLib", b =>
                {
                    b.Navigation("SewingMacroLibBOLs");

                    b.Navigation("SewingOperationLibBOLs");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingArticle", b =>
                {
                    b.Navigation("WeavingDetailStructures");

                    b.Navigation("WeavingRappos");

                    b.Navigation("WeavingRoutings");

                    b.Navigation("WeavingRusticFabricSpecs");

                    b.Navigation("WeavingYarns");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingIED", b =>
                {
                    b.Navigation("WeavingArticles");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingRappo", b =>
                {
                    b.Navigation("WeavingRappoMarks");

                    b.Navigation("WeavingRappoMatrics");

                    b.Navigation("WeavingYarns");
                });

            modelBuilder.Entity("Shopfloor.IED.Domain.Entities.WeavingYarn", b =>
                {
                    b.Navigation("WeavingHorizontalRappoMatrics");

                    b.Navigation("WeavingVerticleRappoMatrics");
                });
#pragma warning restore 612, 618
        }
    }
}
