@page "/StatusImportArticle"
@using MassTransit;
@using Microsoft.AspNetCore.SignalR.Client
@using Shopfloor.EventBus.Models.Message;
@using Shopfloor.EventBus.Definations;
@using System.Globalization;
@inject NavigationManager Navigation
@inject IPublishEndpoint publishEndpoint
@implements IAsyncDisposable

<PageTitle>ImportArticleUpdateStatus</PageTitle>

<p>StatusImportDetail</p>
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/UpdateStatusImportHub"))
            .Build();

        hubConnection.On<int, ItemStatus>("ReceiveChangeStatusImportArticle", (importArticleId, status) =>
        {
            var encodedMsg = $"{importArticleId.ToString()}: {status.ToString()}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<UpdateStatusImportArticlesMessage>("ReceiveChangeStatusImportArticles", (importArticles) =>
        {
            var ids = String.Join(", ", importArticles.ImportArticleIds.Select(n => n.ToString(CultureInfo.InvariantCulture)));
            var encodedMsg = $"{ids}: {importArticles.Status.ToString()}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}